Index: web/src/main/java/de/betterform/agent/web/cache/BFCacheManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/de/betterform/agent/web/cache/BFCacheManager.java	(revision )
+++ web/src/main/java/de/betterform/agent/web/cache/BFCacheManager.java	(revision )
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2012. betterFORM Project - http://www.betterform.de
+ * Licensed under the terms of BSD License
+ */
+
+package de.betterform.agent.web.cache;
+
+import org.infinispan.configuration.cache.CacheMode;
+import org.infinispan.configuration.cache.Configuration;
+import org.infinispan.configuration.cache.ConfigurationBuilder;
+import org.infinispan.eviction.EvictionStrategy;
+import org.infinispan.manager.CacheManager;
+import org.infinispan.manager.DefaultCacheManager;
+import org.infinispan.manager.EmbeddedCacheManager;
+
+import java.io.IOException;
+
+/*
+ * @author Tobi Krebs <tobias.krebs@betterform.de>
+*/
+public class BFCacheManager {
+    private static DefaultCacheManager cacheManager;
+
+
+    private static Configuration getConfiguration() {
+        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
+        configurationBuilder.clustering().cacheMode(CacheMode.LOCAL);
+        return  configurationBuilder.build();
+    }
+    private BFCacheManager() {
+    }
+
+    protected static DefaultCacheManager  getCacheManager() throws IOException {
+        if (BFCacheManager.cacheManager == null) {
+            BFCacheManager.initCacheManager();
+        }
+
+        return BFCacheManager.cacheManager;
+    }
+
+    protected static void initCacheManager() throws IOException {
+        BFCacheManager.cacheManager = new DefaultCacheManager(BFCacheManager.getConfiguration());
+    }
+
+   protected static void stopCacheManager() {
+       if(BFCacheManager.cacheManager != null) {
+           cacheManager.stop();
+       }
+   }
+
+    public static void main(String[] argv) {
+        try {
+            BFCacheManager.initCacheManager();
+            System.out.println("Huhu");
+            BFCacheManager.stopCacheManager();
+        } catch (Exception e) {
+              e.printStackTrace();
+        }
+    }
+}
Index: web/src/main/java/de/betterform/agent/web/cache/XFSessionCache.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/src/main/java/de/betterform/agent/web/cache/XFSessionCache.java	(revision d2f45c2362dd73222ea5485f1d2f032615040cc2)
+++ web/src/main/java/de/betterform/agent/web/cache/XFSessionCache.java	(revision )
@@ -12,6 +12,8 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.infinispan.Cache;
+import org.infinispan.configuration.cache.ConfigurationBuilder;
+import org.infinispan.eviction.EvictionStrategy;
 import org.infinispan.lifecycle.ComponentStatus;
 import org.infinispan.manager.DefaultCacheManager;
 
@@ -31,8 +33,23 @@
     }
 
     protected static void initCache(String cacheName) throws IOException {
-        XFSessionCache.cacheManager = new DefaultCacheManager("infinispan.xml");
+        XFSessionCache.cacheManager = BFCacheManager.getCacheManager() ;
+
+        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
+        configurationBuilder.loaders().addFileCacheStore().location(System.getProperty("java.io.tmpdir") + "/bfCache/"  + cacheName);
+        configurationBuilder.loaders().passivation(true);
+        configurationBuilder.loaders().shared(false);
+        configurationBuilder.loaders().preload(false);
+        configurationBuilder.eviction().strategy(EvictionStrategy.LIRS);
+        configurationBuilder.eviction().maxEntries(10);
+
+        XFSessionCache .cacheManager.defineConfiguration(cacheName, configurationBuilder.build());
+        XFSessionCache.cacheManager.startCache(cacheName);
         XFSessionCache.XFSESSIONCACHE = XFSessionCache.cacheManager.getCache(cacheName);
+
+
+        //XFSessionCache.cacheManager = new DefaultCacheManager("infinispan.xml");
+        //XFSessionCache.XFSESSIONCACHE = XFSessionCache.cacheManager.getCache(cacheName);
     }
 
 
Index: build.properties.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.properties.xml	(revision d2f45c2362dd73222ea5485f1d2f032615040cc2)
+++ build.properties.xml	(revision )
@@ -100,7 +100,6 @@
                 <pathelement location="${core.dir}/src/main/lib/xmlrpc-common-3.1.2.jar" groupid="org.apache.xmlrpc" version="3.1.2" artifactId="xmlrpc-common"/>
                 <pathelement location="${core.dir}/src/main/lib/xmlrpc-client-3.1.2.jar" groupid="org.apache.xmlrpc" version="3.1.2" artifactId="xmlrpc-client"/>
                 <pathelement location="${core.dir}/src/main/lib/xmlrpc-server-3.1.2.jar" groupid="org.apache.xmlrpc" version="3.1.2" artifactId="xmlrpc-server"/>
-                <pathelement location="${core.dir}/src/main/lib/ehcache-core-2.5.2.jar" groupid="net.sf.ehcache" version="2.5.2" artifactId="ehcache-core"/>
                 <pathelement location="${core.dir}/src/main/lib/jgroups-3.2.7.Final.jar" groupid="org.jgroups" version="3.2.7.Final" artifactId="jgroups"/>
                 <pathelement location="${core.dir}/src/main/lib/infinispan-core-5.2.1.Final.jar" groupid="org.jboss" version="5.2.1.Final" artifactId="infinispan-core"/>
                 <pathelement location="${core.dir}/src/main/lib/jboss-transaction-api_1.1_spec-1.0.0.Final.jar" groupid="org.jboss" version="1.0.0.Final" artifactId="jboss-transaction"/>
